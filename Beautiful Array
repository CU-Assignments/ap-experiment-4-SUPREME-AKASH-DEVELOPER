### Aim:
To construct a beautiful array of length n that satisfies the given conditions.  

### Objective:  
- Generate a permutation of numbers [1, n] such that for every i < k < j, the condition 2 * nums[k] ≠ nums[i] + nums[j] holds.  
- Use a divide-and-conquer approach to recursively build the array while maintaining the constraints.  
- Optimize the solution for n ≤ 1000 using mathematical patterns instead of brute force.

### Code:
class Solution {
public:
    int partition(vector<int> &v, int start, int end, int mask)
    {
        //AKASH_22BET10018
        int j = start;
        for(int i = start; i <= end; i++)
        {
            if((v[i] & mask) != 0)
            {
                swap(v[i], v[j]);
                j++;
            }
        }
        return j;
    }
    
    void sort(vector<int> & v, int start, int end, int mask)
    {
        if(start >= end) return;
        int mid = partition(v, start, end, mask);
        sort(v, start, mid - 1, mask << 1);
        sort(v, mid, end, mask << 1);
    }
    
    vector<int> beautifulArray(int N) {
        vector<int> ans;
        for(int i = 0; i < N; i++) ans.push_back(i + 1);
        sort(ans, 0, N - 1, 1);
        return ans;
    }
};
